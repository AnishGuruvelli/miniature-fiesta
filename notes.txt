Q. how to run the code:
        g++ sena.cpp -o sena
        ./sena

int to string: 
string s = to_string(i);
string to something else:
long n1 = stol(num1);
int n2 = stoi(num2);

to lowercase:
s[i] = tolower(s[i]);

// remove duplicates in vector:
nums.erase(unique(nums.begin(), nums.end()), nums.end());
return nums;    


int maxi = *max_element(nums.begin(), nums.end());


// vector<vector<int>> &points
sort(points.begin(), points.end(), comp);
 => static bool comp(vector<int> &a, vector<int> &b)
    {
        return a[1] < b[1];
        // sorting the ending elements 
    }


if(target == -294967296) return {};
// this is how you return an empty vector


int rightSum = accumulate(nums.begin(), nums.end(), 0);
// sums up all the elements in the array/vector
partial_sum(nums.begin(), nums.end(), 0);
// sums up all of them individually: 1 3 6 10 15  for 1 2 3 4 5


A Min-Heap uses the ascending priority.	A Max-Heap uses the descending priority.
max heap: 30 20 10 0
priority_queue<int> pq;
min heap:
priority_queue<int, vector<int>, greater<int>> pq;
priority_queue<pair<int, string>, vector<pair<int, string>>, greater<pair<int, string>>> pq;



how to erase unique elements:
sort(begin(ans),end(ans));
ans.erase(unique(begin(ans), end(ans)),end(ans));

To, find out a sliding window problem :-
> First thing is, we have given something like an "Array" | OR | "String"
> Second thing is, they are talking about either "subsequence" | OR | "substring"
> And third most thing is, either we have given a "window size i.e. k" | OR | we have to "manually find out window size" 

There's exist basically 2 types of sliding window.
    Fix size sliding window {means K is given}
    Variable silze sliding window {means K is not given}

A template which you can use in any sliding window {Variable size} problem:

while(j < size()){

    // Calculation's happen's here
-----------------------------------------------
    if(condition < k){
        j++;
    }
-----------------------------------------------

-----------------------------------------------
    else if(condition == k){
        // ans <-- calculation
        j++;
    }
----------------------------------------------

----------------------------------------------
    else if(condition > k){
        while(condition > k){
            // remove calculation for i
            i++;
        }
        j++;
    }
----------------------------------------------
}
return ans;

// comparator: https://leetcode.com/problems/top-k-frequent-words/description/
    
    struct comparator
    {
        bool operator() (pair<int, string>& a, pair<int, string>& b)
        {
            if(a.first == b.first)           // if frequency are equal put lexicographically greater element on top
            {
                return a.second < b.second;
            }
            else                            // if frequency are not equal put the elements on top which has less frequency
            {
                return a.first > b.first;
            }
        }
    };